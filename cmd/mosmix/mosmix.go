package main

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"bufio"
	"encoding/xml"
	"fmt"
	"io"
	"log"
	"os"

	"golang.org/x/net/html/charset"
)

var oneLevelDown = false

var url = "https://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_S_LATEST_240.kmz"

var filename = "/home/gerald/go/src/github.com/codeformuenster/mosmix/MOSMIX_S_2018032016_240.kml"

var places []Placemark
var metadata ProductDefinition

func main() {

	reader, xmlFile, err := genericReader(filename)
	if err != nil {
		log.Fatal(err)
		return
	}

	decoder := xml.NewDecoder(reader)
	decoder.CharsetReader = charset.NewReaderLabel

	seenMetadata := false
	// http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/
	for {
		token, _ := decoder.Token()
		if token == nil {
			break
		}
		switch se := token.(type) {
		case xml.StartElement:
			if seenMetadata == false {
				handleMetadata(se, decoder)
			} else {
				handlePlacemark(se, decoder)
			}
		}
	}
	if xmlFile != nil {
		defer xmlFile.Close()
	}
	fmt.Println(metadata)
	// p := findPlace("MUENSTER ZENTRUM")
	// fmt.Println(p.Point.coordinates.Text)
}

func findPlace(name string) Placemark {
	for _, place := range places {
		if place.description.Text == name {
			return place
		}
	}
	return Placemark{}
}

func handleMetadata(se xml.StartElement, decoder *xml.Decoder) {
	if se.Name.Local == "ProductDefinition" && se.Name.Space == "https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd" {

		decoder.DecodeElement(&metadata, &se)
	}

}

func handlePlacemark(se xml.StartElement, decoder *xml.Decoder) {
	if se.Name.Local == "Placemark" && se.Name.Space == "http://www.opengis.net/kml/2.2" {
		var item Placemark
		decoder.DecodeElement(&item, &se)
		places = append(places, item)
	}
}

func genericReader(filename string) (io.Reader, *os.File, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, nil, err
	}

	return bufio.NewReader(file), file, err
}

///////////////////////////
/// structs
///////////////////////////

// type dleyRoot314159 struct {
// 	kml *kml `xml:"http://www.opengis.net/kml/2.2 kml,omitempty"` // ZZmaxLength=0
// }

// type Document struct {
// 	ExtendedData *ExtendedData `xml:"http://www.opengis.net/kml/2.2 ExtendedData,omitempty"` // ZZmaxLength=0
// 	Placemark    []*Placemark  `xml:"http://www.opengis.net/kml/2.2 Placemark,omitempty"`    // ZZmaxLength=0
// 	// XMLName              xml.Name              `xml:"http://www.opengis.net/kml/2.2 Document,omitempty"`
// }

type ExtendedData struct {
	Forecast []*Forecast `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Forecast,omitempty"` // ZZmaxLength=0
	// ProductDefinition *ProductDefinition `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ProductDefinition,omitempty"` // ZZmaxLength=0
	// XMLName                   xml.Name                   `xml:"http://www.opengis.net/kml/2.2 ExtendedData,omitempty"`
}

type Placemark struct {
	ExtendedData *ExtendedData `xml:"http://www.opengis.net/kml/2.2 ExtendedData,omitempty"` // ZZmaxLength=0
	Point        *Point        `xml:"http://www.opengis.net/kml/2.2 Point,omitempty"`        // ZZmaxLength=0
	description  *description  `xml:"http://www.opengis.net/kml/2.2 description,omitempty"`  // ZZmaxLength=0
	name         *name         `xml:"http://www.opengis.net/kml/2.2 name,omitempty"`         // ZZmaxLength=0
	// XMLName              xml.Name              `xml:"http://www.opengis.net/kml/2.2 Placemark,omitempty"`
}

type Point struct {
	coordinates *coordinates `xml:"http://www.opengis.net/kml/2.2 coordinates,omitempty"` // ZZmaxLength=0
	// XMLName             xml.Name             `xml:"http://www.opengis.net/kml/2.2 Point,omitempty"`
}

type coordinates struct {
	Text string `xml:",chardata"` // maxLength=20
	// XMLName xml.Name `xml:"http://www.opengis.net/kml/2.2 coordinates,omitempty"`
}

type description struct {
	Text string `xml:",chardata"` // maxLength=22
	// XMLName xml.Name `xml:"http://www.opengis.net/kml/2.2 description,omitempty"`
}

// type kml struct {
// 	AttrXmlnsatom    string            `xml:"xmlns atom,attr" `                                  // maxLength=27
// 	AttrXmlnsdwd     string            `xml:"xmlns dwd,attr" `                                   // maxLength=72
// 	AttrXmlnsgx      string            `xml:"xmlns gx,attr" `                                    // maxLength=33
// 	AttrXmlnskml     string            `xml:"xmlns kml,attr" `                                   // maxLength=30
// 	AttrXmlnsxal     string            `xml:"xmlns xal,attr" `                                   // maxLength=40
// 	Document *Document `xml:"http://www.opengis.net/kml/2.2 Document,omitempty"` // ZZmaxLength=0
// 	XMLName          xml.Name          `xml:"http://www.opengis.net/kml/2.2 kml,omitempty"`
// }

type name struct {
	Text string `xml:",chardata"` // maxLength=5
	// XMLName xml.Name `xml:"http://www.opengis.net/kml/2.2 name,omitempty"`
}

type DefaultUndefSign struct {
	Text string `xml:",chardata"` // maxLength=1
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd DefaultUndefSign,omitempty"`
}

type Forecast struct {
	AttrDwdSpaceelementName string `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd elementName,attr" ` // maxLength=5
	value                   *value `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd value,omitempty"`   // ZZmaxLength=0
	// XMLName                 xml.Name       `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Forecast,omitempty"`
}

type ForecastTimeSteps struct {
	TimeStep []*TimeStep `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd TimeStep,omitempty"` // ZZmaxLength=0
	// XMLName          xml.Name            `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ForecastTimeSteps,omitempty"`
}

type FormatCfg struct {
	DefaultUndefSign *DefaultUndefSign `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd DefaultUndefSign,omitempty"` // ZZmaxLength=0
	// XMLName                  xml.Name                  `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd FormatCfg,omitempty"`
}

type GeneratingProcess struct {
	Text string `xml:",chardata"` // maxLength=30
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd GeneratingProcess,omitempty"`
}

// type IssueTime struct {
// 	XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd IssueTime,omitempty"`
// }

type Issuer struct {
	Text string `xml:",chardata"` // maxLength=22
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Issuer,omitempty"`
}

type Model struct {
	AttrDwdSpacename          string `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd name,attr" `          // maxLength=9
	AttrDwdSpacereferenceTime string `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd referenceTime,attr" ` // maxLength=20
	// XMLName                   xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Model,omitempty"`
}

type ProductDefinition struct {
	ForecastTimeSteps *ForecastTimeSteps `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ForecastTimeSteps,omitempty"` // ZZmaxLength=0
	FormatCfg         *FormatCfg         `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd FormatCfg,omitempty"`         // ZZmaxLength=0
	GeneratingProcess *GeneratingProcess `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd GeneratingProcess,omitempty"` // ZZmaxLength=0
	// IssueTime         *IssueTime         `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd IssueTime,omitempty"`         // ZZmaxLength=0
	Issuer          *Issuer          `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Issuer,omitempty"`          // ZZmaxLength=0
	ProductID       *ProductID       `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ProductID,omitempty"`       // ZZmaxLength=0
	ReferencedModel *ReferencedModel `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ReferencedModel,omitempty"` // ZZmaxLength=0
	// XMLName                   xml.Name                   `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ProductDefinition,omitempty"`
}

type ProductID struct {
	Text string `xml:",chardata"` // maxLength=13
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ProductID,omitempty"`
}

type ReferencedModel struct {
	Model []*Model `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd Model,omitempty"` // ZZmaxLength=0
	// XMLName       xml.Name         `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd ReferencedModel,omitempty"`
}

type TimeStep struct {
	Text string `xml:",chardata"` // maxLength=24
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd TimeStep,omitempty"`
}

type value struct {
	Text string `xml:",chardata"` // maxLength=2643
	// XMLName xml.Name `xml:"https://opendata.dwd.de/weather/lib/pointforecast_dwd_extension_V1_0.xsd value,omitempty"`
}

///////////////////////////
